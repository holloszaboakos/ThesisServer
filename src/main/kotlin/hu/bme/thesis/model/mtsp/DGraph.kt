/**
* DRP
* This is the hu.bme.thesis.utility.main server of QLM's DRP system
*
* OpenAPI spec version: 1.0.0
* Contact: akos.hollo-szabo@qlndc.hu
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package hu.bme.thesis.model.mtsp

import java.util.*
import javax.persistence.*


/**
 *
 * @param id
 * @param name
 * @param center
 * @param objectives
 * @param edgesBetween
 * @param edgesFromCenter
 * @param edgesToCenter
 */
@Entity
@Table(name = "graph")
@NamedQueries(
    NamedQuery(
        name = "listGraph",
        query = "FROM Graph"
    ),
    NamedQuery(
        name = "findByNameGraph",
        query = "FROM Graph where name = :name"
    )
)
data class DGraph (
    @Id
    @Column(name = "id", length = 255)
    var id: String = UUID.randomUUID().toString(),
    val name: String="",
    @OneToOne(cascade = [CascadeType.ALL])
    val center: DGps= DGps(),
    @OneToMany(cascade = [CascadeType.ALL])
    @OrderColumn(name = "orderInOwner")
    val objectives: Array<DObjective> = arrayOf(),
    @OneToMany(cascade = [CascadeType.ALL])
    @OrderColumn(name = "orderInOwner")
    val edgesBetween: Array<DEdgeArray> = arrayOf(),
    @OneToMany(cascade = [CascadeType.ALL])
    @OrderColumn(name = "orderInOwner")
    val edgesFromCenter: Array<DEdge> = arrayOf(),
    @OneToMany(cascade = [CascadeType.ALL])
    @OrderColumn(name = "orderInOwner")
    val edgesToCenter: Array<DEdge> = arrayOf()
) {
    init {
        objectives.forEachIndexed { index, value ->
            value.orderInOwner = index
        }

        edgesBetween.forEachIndexed { indexArray, array ->
            array.orderInOwner = indexArray
            array.values.forEachIndexed { indexValue, value ->
                value.orderInOwner = indexValue
            }
        }
        edgesFromCenter.forEachIndexed { index, value ->
            value.orderInOwner = index
        }
        edgesToCenter.forEachIndexed { index, value ->
            value.orderInOwner = index
        }
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as DGraph

        if (id != other.id) return false
        if (name != other.name) return false
        if (center != other.center) return false
        if (!objectives.contentEquals(other.objectives)) return false
        if (!edgesBetween.contentEquals(other.edgesBetween)) return false
        if (!edgesFromCenter.contentEquals(other.edgesFromCenter)) return false
        if (!edgesToCenter.contentEquals(other.edgesToCenter)) return false

        return true
    }

    override fun hashCode(): Int {
        var result = id.hashCode()
        result = 31 * result + name.hashCode()
        result = 31 * result + center.hashCode()
        result = 31 * result + objectives.contentHashCode()
        result = 31 * result + edgesBetween.contentHashCode()
        result = 31 * result + edgesFromCenter.contentHashCode()
        result = 31 * result + edgesToCenter.contentHashCode()
        return result
    }
}