/**
 * DRP
 * This is the hu.bme.thesis.utility.main server of QLM's DRP system
 *
 * OpenAPI spec version: 1.0.0
 * Contact: akos.hollo-szabo@qlndc.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package hu.bme.thesis.network.apis

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import com.google.gson.Gson
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.locations.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import hu.bme.thesis.logic.OAlgorithmManager
import hu.bme.thesis.logic.evolutionary.setup.EGeneticSetup
import hu.bme.thesis.model.OHibernateManager
import hu.bme.thesis.model.mtsp.*
import hu.bme.thesis.network.Paths
import hu.bme.thesis.network.delete
import java.util.*

@KtorExperimentalLocationsAPI
fun Route.SetupApi() {
    val gson = Gson()

    route("/setup/objective") {
        post {
            val obj: DObjective = call.receive()
            obj.id = UUID.randomUUID().toString()
            OHibernateManager.saveOrUpdate(obj)
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(obj.id)
            )
        }
    }


    route("/setup/salesman") {
        post {
            val salesman: DSalesman = call.receive()
            salesman.id = UUID.randomUUID().toString()
            OHibernateManager.saveOrUpdate(salesman)
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(salesman.id)
            )
        }
    }


    route("/setup/setting") {
        post {
            val setting: DSetting = call.receive()
            if (setting.id.isBlank())
                setting.id = UUID.randomUUID().toString()
            OAlgorithmManager.settings = setting
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(setting.id)
            )
        }
    }


    route("/setup/task") {
        post {
            val task: DTask = call.receive()
            if (task.id.isBlank())
                task.id = UUID.randomUUID().toString()
            OAlgorithmManager.task = task
            call.respond(
                HttpStatusCode.OK,
                gson.toJson(task.id)
            )
        }
    }


    get<Paths.listAlgorithms> {
        call.respond(
            HttpStatusCode.OK,
            gson.toJson(arrayOf(EGeneticSetup.values().map { it.code }))

        )
    }


    get<Paths.listSettingsNames> {
        call.respond(HttpStatusCode.OK, gson.toJson(
            OHibernateManager.list<DSetting>("Setting").map { it.name }
        ))
    }


    get<Paths.listTaskNames> {
        call.respond(HttpStatusCode.OK, gson.toJson(
            OHibernateManager.list<DTask>("Task").map { it.name }
        ))
    }


    get<Paths.loadSetting> {
        val name: String = call.request.queryParameters["name"] ?: throw Error("Name should not be null")
        val setting = OHibernateManager.findByName<DSetting>("Setting", name)
        OAlgorithmManager.settings = setting
        call.respond(HttpStatusCode.OK, gson.toJson(setting))
    }


    get<Paths.loadTask> {
        val name: String = call.request.queryParameters["name"] ?: throw Error("Name should not be null")
        val task = OHibernateManager.findByName<DTask>("Task", name)
        OAlgorithmManager.task = task
        call.respond(HttpStatusCode.OK, gson.toJson(task))
    }


    delete<Paths.removeObjective> {
        val name: String = call.receive()
        val objective = OHibernateManager.findByName<DObjective>("Objective", name)
        OHibernateManager.delete(objective)
        call.respond(HttpStatusCode.OK)
    }


    delete<Paths.removeSalesman> {
        val name: String = call.receive()
        val salesman = OHibernateManager.findByName<DSalesman>("Salesman", name)
        OHibernateManager.delete(salesman)
        call.respond(HttpStatusCode.OK)
    }


    route("/setup/setting") {
        put {
            val setting = OAlgorithmManager.settings?.copy(name = call.receive())
            if (setting != null) {
                OHibernateManager.saveOrUpdate(setting)
                call.respond(HttpStatusCode.OK)
            } else call.respond(HttpStatusCode.MethodNotAllowed)
        }
    }


    route("/setup/task") {
        put {
            val task = OAlgorithmManager.task?.copy(name = call.receive())
            if (task != null) {
                task.salesmen.forEachIndexed { index, salesman ->
                    if (salesman.id.isBlank())
                        salesman.id = UUID.randomUUID().toString()
                    salesman.orderInOwner = index
                }
                if (task.costGraph.id.isBlank())
                    task.costGraph.id = UUID.randomUUID().toString()
                if (task.costGraph.center.id.isBlank())
                    task.costGraph.center.id = UUID.randomUUID().toString()
                task.costGraph.objectives.forEachIndexed { index, objective ->
                    if (objective.id.isBlank())
                        objective.id = UUID.randomUUID().toString()
                    objective.orderInOwner = index
                    if (objective.location.id.isBlank())
                        objective.location.id= UUID.randomUUID().toString()

                }
                task.costGraph.edgesBetween.forEachIndexed { index, edgeArray ->
                    if (edgeArray.id.isBlank())
                        edgeArray.id = UUID.randomUUID().toString()
                    edgeArray.orderInOwner = index
                    edgeArray.values.forEachIndexed { edgeIndex, edge ->
                        if (edge.id.isBlank())
                            edge.id = UUID.randomUUID().toString()
                        edge.orderInOwner = edgeIndex
                        edge.route.forEachIndexed { indexEdge, gps ->
                            if (gps.id.isBlank())
                                gps.id = UUID.randomUUID().toString()
                            gps.orderInOwner = indexEdge
                        }
                    }
                }
                task.costGraph.edgesFromCenter.forEachIndexed { index, edge ->
                    if (edge.id.isBlank())
                        edge.id = UUID.randomUUID().toString()
                    edge.orderInOwner = index
                    edge.route.forEachIndexed { indexEdge, gps ->
                        if (gps.id.isBlank())
                            gps.id = UUID.randomUUID().toString()
                        gps.orderInOwner = indexEdge
                    }
                }
                task.costGraph.edgesToCenter.forEachIndexed { index, edge ->
                    if (edge.id.isBlank())
                        edge.id = UUID.randomUUID().toString()
                    edge.orderInOwner = index
                    edge.route.forEachIndexed { indexEdge, gps ->
                        if (gps.id.isBlank())
                            gps.id = UUID.randomUUID().toString()
                        gps.orderInOwner = indexEdge
                    }
                }
                OHibernateManager.saveOrUpdate(task)
                call.respond(HttpStatusCode.OK)
            } else call.respond(HttpStatusCode.MethodNotAllowed)
        }
    }

}
